// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	git "github.com/go-git/go-git/v5"
	mock "github.com/stretchr/testify/mock"

	plumbing "github.com/go-git/go-git/v5/plumbing"
)

// Worktree is an autogenerated mock type for the Worktree type
type Worktree struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *Worktree) Add(_a0 string) (plumbing.Hash, error) {
	ret := _m.Called(_a0)

	var r0 plumbing.Hash
	if rf, ok := ret.Get(0).(func(string) plumbing.Hash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: _a0, _a1
func (_m *Worktree) Commit(_a0 string, _a1 *git.CommitOptions) (plumbing.Hash, error) {
	ret := _m.Called(_a0, _a1)

	var r0 plumbing.Hash
	if rf, ok := ret.Get(0).(func(string, *git.CommitOptions) plumbing.Hash); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *git.CommitOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
