// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	git "github.com/go-git/go-git/v5"
	mock "github.com/stretchr/testify/mock"

	plumbing "github.com/go-git/go-git/v5/plumbing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateTag provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repository) CreateTag(_a0 string, _a1 plumbing.Hash, _a2 *git.CreateTagOptions) (*plumbing.Reference, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *plumbing.Reference
	if rf, ok := ret.Get(0).(func(string, plumbing.Hash, *git.CreateTagOptions) *plumbing.Reference); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, plumbing.Hash, *git.CreateTagOptions) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Worktree provides a mock function with given fields:
func (_m *Repository) Worktree() (*git.Worktree, error) {
	ret := _m.Called()

	var r0 *git.Worktree
	if rf, ok := ret.Get(0).(func() *git.Worktree); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Worktree)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
